useValue

В этом варианте подставляем конкретный экземпляр значения, которое может быть любым типом данных.

providers: [
  // число
  { provide: 'VALUE_NUMBER', useValue: 1  },
  // текст
  { provide: 'VALUE_STRING', useValue: 'Текстовое значение' },
  // функция
  { provide: 'VALUE2_FUNCTION', useValue: () => { return 'что-то' } },
  // объект
  { provide: 'VALUE2_OBJECT', useValue: { id: 1, name: 'имя' } },
  // массив
  { provide: 'VALUE2_ARRAY', useValue: [1, 2, 3] } },
  // и т.д.
  /* Другие провайдеры */
]

С помощь регистрации значений часто регистрируют конфигурационные значения. 
Например, Angular содержит файлы environment, в которых хранятся конфигурационные значения 
в зависимости от типа сборки, но к этим файлам нет доступа из подключаемых библиотек. 
В своей практике часто беру значение из environment и регистрирую это значение в контейнере, 
после чего к конфигурации получает доступ библиотека. В примере ключ сделал строкой исключительно 
в демонстрационных целях, в реальных проекта используйте токены. 